#-------------------------------------------------------------------------------------#
# Project Setup & Development 9 Line
#-------------------------------------------------------------------------------------#
# 
# INITIAL SETUP:
# 1. Create virtual environment:    python -m venv venv
# 2. Activate virtual environment:
#    - Windows:                    .\venv\Scripts\activate
#    - Unix/MacOS:                 source venv/bin/activate
# 3. Install requirements:         pip install -r requirements.txt
# 4. Create .env file:            cp .env.example .env
# 5. Update dependencies:          pip freeze > requirements.txt
#
# DEVELOPER QUICK REFERENCE
#=======================

## 1. ENVIRONMENT SETUP
#---------------------
# Create and activate virtual environment
python -m venv venv
.\venv\Scripts\activate  # Windows
source venv/bin/activate  # Unix/MacOS

# Dependencies
pip install -r requirements.txt  # Install
pip freeze > requirements.txt    # Update
pip install package==version    # Specific version

## 2. GIT ESSENTIALS
#------------------
# Basic workflow
git status                      # Check status
git pull origin main           # Get latest
git checkout -b feature/name   # New branch
git add .                      # Stage all
git commit -m "type: message"  # Commit
git push origin branch-name    # Push

# Fix common issues
git stash                     # Save changes
git stash pop                 # Restore changes
git reset --hard HEAD         # Undo all
git reset --soft HEAD^        # Undo commit
git clean -fd                 # Remove untracked

## 3. CODE QUALITY
#----------------
# Formatting
black .                       # Format code
isort .                      # Sort imports
flake8                       # Lint code
mypy .                       # Type check

# Testing
pytest                       # Run tests
pytest -v                    # Verbose
pytest -k "test_name"        # Specific test
pytest --cov=app tests/      # Coverage

## 4. DOCKER COMMANDS
#------------------
# Basic operations
docker build -t name .       # Build image
docker run -p 8501:8501 name # Run container
docker ps                    # List running
docker stop <container-id>   # Stop container
docker-compose up           # Start services

## 5. DATABASE
#------------
# PostgreSQL
psql -U username -d dbname   # Connect
\l                          # List DBs
\dt                         # List tables
\q                          # Quit

# MongoDB
mongosh                     # Connect shell
show dbs                    # List DBs
use dbname                  # Switch DB
show collections            # List collections

## 6. API TESTING
#--------------
# cURL
curl -X GET url            # GET request
curl -X POST url -d data   # POST request

# HTTPie (more readable)
http GET url              # GET request
http POST url key=value   # POST request

## 7. DEBUGGING
#------------
# Python debugger
breakpoint()              # Set breakpoint
n                        # Next line
s                        # Step into
c                        # Continue
p variable              # Print variable
q                       # Quit

# Logging
logger.debug("message")  # Debug level
logger.info("message")   # Info level
logger.error("message")  # Error level

## 8. PERFORMANCE
#--------------
# Profiling
python -m cProfile script.py  # Profile script
memory_profiler              # Memory usage
line_profiler               # Line-by-line

# Monitoring
top                         # System usage
htop                       # Better top
df -h                      # Disk usage

## 9. SECURITY
#-----------
# Environment
cp .env.example .env       # Create env file
chmod 600 .env             # Secure perms

# SSH
ssh-keygen -t ed25519     # Generate key
ssh-copy-id user@host     # Copy key

## QUICK FIXES
#------------
# Port conflicts
netstat -ano | findstr :8501  # Find process
taskkill /PID <PID> /F       # Kill process

# Virtual env issues
deactivate                    # Exit venv
rm -rf venv                   # Remove venv
python -m venv venv           # Recreate

# Package issues
pip install --no-cache-dir    # Clean install
pip install -U package        # Upgrade

## PRODUCTIVITY
#-------------
# VSCode
Ctrl+Shift+P               # Command palette
Ctrl+P                    # Quick open
Ctrl+`                    # Terminal
Alt+Up/Down              # Move line
Ctrl+D                   # Multi-select

# Terminal
Ctrl+R                   # Search history
Ctrl+L                   # Clear screen
!!                       # Last command
cd -                     # Previous dir

## BEST PRACTICES
#--------------
# Commits
feat: new feature
fix: bug fix
docs: documentation
style: formatting
refactor: code structure
test: adding tests
chore: maintenance

# Python
- Use type hints
- Write docstrings
- Follow PEP 8
- Keep functions small
- Test edge cases

Remember:
1. Always pull before starting work
2. Keep commits atomic and descriptive
3. Document significant changes
4. Test before pushing
5. Review your own code first

#
# STREAMLIT COMMANDS:
# Development:
# 1. Run app:                     streamlit run app.py
# 2. Run with custom port:        streamlit run app.py --server.port 8502
# 3. Enable debug mode:           streamlit run app.py --logger.level=debug
# 4. Clear cache:                 streamlit cache clear
# 5. Show all config options:     streamlit config show
# 6. Create new component:        streamlit create my_component
#
# Production:
# 1. Run in production:           streamlit run app.py --server.address=0.0.0.0
# 2. Set memory limit:            streamlit run app.py --server.maxUploadSize=50
# 3. Enable authentication:       streamlit run app.py --server.enableCORS=false
#
# GIT COMMANDS:
# Basic Operations:
# 1. Initialize repository:        git init
# 2. Add files to staging:        git add .
# 3. Commit changes:              git commit -m "your message"
# 4. Push to remote:              git push -u origin branch-name
# 5. Pull latest changes:         git pull origin branch-name
# 
# Branching:
# 1. Create & switch branch:      git checkout -b branch-name
# 2. Switch branches:             git checkout branch-name
# 3. List branches:               git branch
# 4. Delete branch:               git branch -d branch-name
# 5. Merge branch:                git merge branch-name
#
# Advanced Operations:
# 1. Fetch updates:               git fetch origin
# 2. Rebase branch:               git rebase main
# 3. Cherry-pick commit:          git cherry-pick commit-hash
# 4. Reset to commit:             git reset --hard commit-hash
# 5. Clean untracked files:       git clean -fd
#
# Status & History:
# 1. Check status:                git status
# 2. View commit history:         git log
# 3. View changes:                git diff
# 4. Discard changes:             git checkout -- <file>
# 5. Stash changes:               git stash
# 6. Apply stashed changes:       git stash pop
# 7. Show commit details:         git show commit-hash
#
# GIT COMMIT MESSAGE STRUCTURE:
# Format:
# <type>(<scope>): <subject>
# <BLANK LINE>
# <body>
# <BLANK LINE>
# <footer>
#
# Types:
# - feat:     New feature
# - fix:      Bug fix
# - docs:     Documentation changes
# - style:    Formatting, missing semi colons, etc
# - refactor: Code restructuring
# - test:     Adding tests
# - chore:    Maintenance tasks
# - perf:     Performance improvements
# - ci:       CI/CD changes
#
# Example:
# feat(auth): implement JWT authentication
#
# - Add JWT token generation
# - Implement token validation middleware
# - Add refresh token functionality
#
# Closes #123
#
# DOCKER COMMANDS:
# Basic:
# 1. Build image:                 docker build -t app-name .
# 2. Run container:               docker run -p 8501:8501 app-name
# 3. List containers:             docker ps
# 4. Stop container:              docker stop <container-id>
# 5. Remove container:            docker rm <container-id>
# 6. List images:                 docker images
#
# Advanced:
# 1. Build with no cache:         docker build --no-cache -t app-name .
# 2. Run interactive shell:       docker exec -it <container-id> bash
# 3. View logs:                   docker logs <container-id>
# 4. Compose up:                  docker-compose up -d
# 5. Compose down:                docker-compose down
#
# PROJECT STRUCTURE:
# ├── app/                        # Application source code
# │   ├── config/                 # Configuration files
# │   ├── models/                 # Data models
# │   ├── services/              # Business logic
# │   ├── api/                   # API endpoints
# │   └── utils/                 # Utility functions
# ├── tests/                      # Test files
# │   ├── unit/                  # Unit tests
# │   └── integration/           # Integration tests
# ├── frontend/                   # Frontend code
# ├── docs/                      # Documentation
# ├── scripts/                   # Utility scripts
# ├── .env                        # Environment variables
# ├── .gitignore                 # Git ignore rules
# ├── requirements.txt           # Python dependencies
# ├── requirements-dev.txt       # Development dependencies
# ├── Dockerfile                 # Docker configuration
# └── README.md                  # Project documentation
#
# COMMON ISSUES & SOLUTIONS:
# 1. Port already in use:         netstat -ano | findstr :<PORT>
#                                taskkill /PID <PID> /F
# 2. Dependency conflicts:        pip install --upgrade pip
#                                pip install -r requirements.txt --upgrade
# 3. Git merge conflicts:         git status
#                                git merge --abort
#                                git reset --hard origin/main
# 4. Streamlit cache issues:      streamlit cache clear
#                                streamlit run --browser.serverAddress="localhost"
#
# USEFUL LINKS:
# - Project Documentation:        <link-to-docs>
# - API Documentation:            <link-to-api-docs>
# - Issue Tracker:               <link-to-issues>
# - CI/CD Pipeline:              <link-to-pipeline>
# - Monitoring Dashboard:        <link-to-dashboard>
#
#-------------------------------------------------------------------------------------#
